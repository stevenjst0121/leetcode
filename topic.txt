Data Structures
=============
* String

* Array

* Linked List

* Stack
    - The nature of the stack is that bottom items will never be touched until the top one is poped out. If needed, you can store some "so far" value along with the value in the stack.
        - For example: "minimum value so far in the stack".
        - For example: "count of last repeated num in the stack".
    - stack of stack might help to solve multi-dimensioning problem?

* Queue

* Heap/Priority Queue
    - building is O(n) (because it's directly related to height of tree but not n, math deduction)
    - insert is O(logN)

* Hashtable
    - Understand how it is implemented
    - Good hash function is important
    - C++ map is actually implmented as a red-black tree

* Tree
    - Binary Search Tree
    - Red-Black Tree
    - AVL Tree

* Graph
    - Directional vs. un-directional
    - Trie
    - Understand Cycle!
        - In a directed graph, cycle could mean:
            1. There is a loop, image each edge represents dependency, e.g. a -> b -> c -> a. In this case, checking cycle needs to do DFS + visited with visit status (0 - in traverse, 1 - done traverse)
            2. Multiple dependencies, image a -> b -> d, and also a -> c -> d. In this case, checking cycle only need a simple visited set.
        - In an undirected graph, cycle check just need simple visited.


Algorithms
============
* Dynamic Programming
    - Top-down: Recursion + memoization, store resolved subproblems somwhere to avoid duplication
    - Bottom-up: Solve all subproblems first and get the needed answer from store
      (Sometimes in order to build from smallest, need to loop range(N - 1, -1, -1))
    - Sometimes need to build two dp arrays from both sides, like 1014. Best Sightseeing Pair, 123. Best Time to Buy and Sell Stock III
    - Most of times, dp[i][j] can already represent the result. But sometimes, such as problem 718, the result is max of all dp[i][j]
    - After finishing a DP solution, think if keeping every DP point is needed. Maybe just track "max so far" or "min so far" is good enough, this helps to reduce space complexity
    - When dealing with string or array, think of using index for dp, e.g. 115. Distinct Subsequences.

* Two Pointers
    - Even 3 pointers: 548. Split Array with Equal Sum? Maybe start with traversing the middle pointer?
    - Accumulative sum from two sides?

* Binary Search
    - Basic concept is divide and conquer, think whether subproblems can be divided into left and right parts

* Sort

* Bit manipulation
    0	0	0
    0	1	1
    1	0	1
    1	1	0

* DFS
    - store some information and return as useful info for the problem, such as height/depth

* BFS
    - Normal tree only can BFS childs. But can DFS a tree first to mark parents, and then can do BFS on childs and parents at the same time

* Disjoint Set / Union Find
The idea is to partition given relationships (connections), such as find connected components of a Graph
    - Use a tree to store representatives of each group (each group start with using itself as representative)
    - [Optional] Can keep track of group information at the same time, such as group size or group members
    - Define `find` and `union` functions:
        - find
            - Given a node, find the representative (recursive calls to find itself)
        - union
            - Given two nodes, find their representatives repespectively
            - If they have same representative, they are already grouped
            - If not, choose one group and merge into the other (if group size is available, merge the smaller one into bigger one)
    
* Divide and Conquer
    - Binary Search
    - Merge k sorted lists

* Backtracking
    - Backtracking is an algorithm for finding all solutions by exploring all potential candidates.
    (This is pretty much brute force, try to use with greedy)
    - !!!! Be careful to only use backtrack when need to find all possibilities. When the problem is asking for optimal solution, consider DP first!

* Greedy
    - Greedy means try a local optimal solution first
    - The local solution above doesn't necessarily mean it is the optimal solution, so the greedy function needs to be able to tell if it is optimal, e.g. a return value True/False.
    - When we try greedy and we found a solution, we can stop trying. There is no need to compare with current maximum.
    
    - Greedy can be used with backtracking, see problem 322 Reconstruct Itinerary

* Quick Select
    - Find kth smallest element
    - O(N), because only need to search one side

* Two Heaps
    - One max heap holding all smaller items and one min heap holding all larger items
    - O(1) access to middle

* Accumulative Sum
    - 370 is an interesting application of accumulative sum!

* Use index to save extra space
    - 41. First Missing Positive
    - 442. Find All Duplicates in an Array