PYTHON CHEAT SHEET
==================

deque
------------------
from collections import deque

append(x)
appendleft(x)
count(x) # count number of x in deque
extend(iterable)
extendleft(iterable)
insert(i, x)
pop() # remove and return from right
popleft()


Mutable Sequence Types
------------------
s[i]
s[i:j]
s[i:j:k]
del s[i:j:k]
s.append(x)
s.clear()
s.copy() # same as s[:]
s.extend(iterable) # same as s += t
s.insert(i, x)
s.pop([i]) # retrieves the item at i and also removes it from s
s.remove(x) # remove the first item from s where s[i] is equal to x


dict
------------------
list(d) # Return a list of all the keys used in the dictionary d.
del d[key]
key in d
key not in d
iter(d) # same as iter(d.keys()), Return an iterator over the keys of the dictionary
items() # ** Return a new view of the dictionaryâ€™s items ((key, value) pairs).
update(dict)
values()

collections.defaultdict(list) # When subscripting, if key not found, create default type

Use tuple() as key to simply store multiple values as key in a dictionary

# To use custom class with dict, define __hash__() and __eq__()
# In __hash__(), naively do something like return hash((self.begin, self.end))

list
------------------
sort(key=lambda x : x) # sort the items in place
index(val) # Find index of first val


********IMPORTANT*********
Though python objects are passed by reference, but reference is not POINTER!
Meaning, you can change member variables of an object by its reference, but if you want to change the object completely (e.g. using assignment), you can't just do that.

Array slicing notation
------------------
https://railsware.com/blog/python-for-machine-learning-indexing-and-slicing-for-lists-tuples-strings-and-other-sequential-types/
nums[:5] # first 5
nums[-3:] # last 3
nums[:-2] # all but last two elements
nums[::2] # evetn 2nd element

heapq
------------------
Heaps are binary trees for which every parent node has a value less than or equal to any of its children.

Inserting into a heap of size n is O(n)

queue = list()
heapq.heappush(queue, num)
heapq.heappop(queue)
...

# To use heapq with custom class, define __lt__()
# OR
# Just push tuple like (key, value) into heap, it will just use first element for sorting

random number generator
------------------
random.randrange(start, stop, step)
 # E.g., generate random number between 1-25 inclusively
randrange(1, 26, 1)

OrderedDict
------------------
It's implemented as a hashmap + double linked-list to track position of node
insert is O(1) # for both hashmap insert and O(1) for linked_list insert on end
access is O(1) # for hashmap
del is O(1) # delete from hasmap and double linked-list are both O(1)

zip
------------------
Use zip to do iterations with two lists (where one list can be shorter than the other)
for first_word, second_word in zip(words, words[1:]):

for...else...
------------------

Beats 96%else for iteration, triggers when the loop exhausts (looped through everything without break)

Graph DFS
------------------
All nodes in stack are not visited yet:
```
stack = [root]
while stack:
    node = stack.pop()
    visited.add(node)
    # do something
    for neighbor in graph[node]:
        if neighbor not in visited:
            stack.append(neighbor)
```

All nodes in stack are already visited:
```
visited.add(root)
stack = [root]
while stack:
    node = stack.pop()
    # do something
    for neighbor in graph[node]:
        if neighbor not in visited:
            visited.add(neighbor)
            stack.append(neighbor)
```

number string to char list
------------------
nums = list(str(nums_str))

Easiest way to write binrary search
------------------
Two pointers

```
low, high = 0, len(nums) - 1
while low < high: # Always this condition
    mid = low + (high - low) // 2

    # Depends how you want the result to be, for examle in 528 pick random with weight,
    # we want to find the index of accumulative sums whosse value is LEAST LARGER than the generated random number
    # that transaltes to if the value is smaller than genrated num, result must be on the right (exclusive mid)
    # but if value is larger or equal to generated num, result must be on the left (include mid)
    # **** Since mid is floor here, low must = mid + 1
    if nums[mid] < target:
        low = mid + 1
    else:
        high = mid
    
    return low # now low must be >= high

    # If you want low = mid, you can do:
    mid = low + ceil((high - low) / 2)
```

Convert ASCII chars back and forth
------------------
>>> ord("h")
104

>>> chr(104)
'h'

bisect
------------------
https://docs.python.org/3/library/bisect.html
This module provides support for maintaining a list in sorted order without having to sort the list after each insertion.

bisec.insort_left
